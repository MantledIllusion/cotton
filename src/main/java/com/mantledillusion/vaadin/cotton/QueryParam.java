package com.mantledillusion.vaadin.cotton;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.reflect.TypeUtils;

import com.mantledillusion.injection.hura.AnnotationValidator;
import com.mantledillusion.injection.hura.Inspector;
import com.mantledillusion.injection.hura.Injector.TemporalInjectorCallback;
import com.mantledillusion.injection.hura.annotation.Construct;
import com.mantledillusion.vaadin.cotton.CottonUI.NavigationEvent;
import com.mantledillusion.vaadin.cotton.CottonUI.NavigationType;
import com.mantledillusion.vaadin.cotton.exception.WebException;
import com.mantledillusion.vaadin.cotton.exception.WebException.HttpErrorCodes;
import com.mantledillusion.vaadin.cotton.viewpresenter.Subscribe;

/**
 * Representation type of a single URL query parameter.
 * <p>
 * Instances of this type are generated by annotating a {@link QueryParam} type
 * field with @{@link RequiredQueryParam}.
 */
public final class QueryParam {

	// #########################################################################################################################################
	// ######################################################### REQUIRED QUERY PARAM ##########################################################
	// #########################################################################################################################################

	static class RequiredQueryParamValidator implements AnnotationValidator<RequiredQueryParam, Field> {

		@Override
		public void validate(RequiredQueryParam annotationInstance, Field annotatedElement) throws Exception {
			if (!TypeUtils.isAssignable(QueryParam.class, annotatedElement.getGenericType())) {
				throw new WebException(HttpErrorCodes.HTTP904_ILLEGAL_ANNOTATION_USE,
						"The field '" + annotatedElement.getName() + "' in the type '"
								+ annotatedElement.getDeclaringClass().getSimpleName() + "' is annotated with @"
								+ RequiredQueryParam.class.getSimpleName()
								+ ", but the fields type is not assignable by an instance of "
								+ QueryParam.class.getSimpleName());
			} else if (Modifier.isStatic(annotatedElement.getModifiers())) {
				throw new WebException(HttpErrorCodes.HTTP904_ILLEGAL_ANNOTATION_USE,
						"The field '" + annotatedElement.getName() + "' in the type '"
								+ annotatedElement.getDeclaringClass().getSimpleName() + "' is annotated with @"
								+ RequiredQueryParam.class.getSimpleName() + ", but the field is static.");
			} else if (StringUtils.isEmpty(annotationInstance.value())) {
				throw new WebException(HttpErrorCodes.HTTP904_ILLEGAL_ANNOTATION_USE,
						"The field '" + annotatedElement.getName() + "' in the type '"
								+ annotatedElement.getDeclaringClass().getSimpleName() + "' is annotated with @"
								+ RequiredQueryParam.class.getSimpleName() + ", but the query parameter key '"
								+ annotationInstance.value() + "' is empty, which is not allowed.");
			} else if (annotationInstance.valueCount() == 0) {
				throw new WebException(HttpErrorCodes.HTTP904_ILLEGAL_ANNOTATION_USE,
						"The field '" + annotatedElement.getName() + "' in the type '"
								+ annotatedElement.getDeclaringClass().getSimpleName() + "' is annotated with @"
								+ RequiredQueryParam.class.getSimpleName()
								+ ", but the requested parameter value count is 0, which is not allowed.");
			}

			Pattern pattern;
			try {
				pattern = Pattern.compile(annotationInstance.matcher());
			} catch (PatternSyntaxException e) {
				throw new WebException(HttpErrorCodes.HTTP904_ILLEGAL_ANNOTATION_USE,
						"The field '" + annotatedElement.getName() + "' in the type '"
								+ annotatedElement.getDeclaringClass().getSimpleName() + "' is annotated with @"
								+ RequiredQueryParam.class.getSimpleName() + ", but the matcher  '"
								+ annotationInstance.matcher() + "' is no valid pattern: " + e.getMessage(),
						e);
			}

			String[] fallbacks = annotationInstance.defaultValues();
			if (annotationInstance.forced() && fallbacks.length > 0) {
				if (annotationInstance.valueCount() > 0 && annotationInstance.valueCount() != fallbacks.length) {
					throw new WebException(HttpErrorCodes.HTTP904_ILLEGAL_ANNOTATION_USE,
							"The field '" + annotatedElement.getName() + "' of the type '"
									+ annotatedElement.getDeclaringClass().getSimpleName() + "' is annotated with @"
									+ RequiredQueryParam.class.getSimpleName() + ", but the amount of "
									+ fallbacks.length + " default values does not match the specified amount of "
									+ annotationInstance.valueCount() + " values.");
				}

				for (int j = 0; j < fallbacks.length; j++) {
					if (fallbacks[j] == null) {
						throw new WebException(HttpErrorCodes.HTTP901_ILLEGAL_ARGUMENT_ERROR,
								"Unable to create a query param with a null value.");
					} else if (fallbacks[j].indexOf(',') != -1) {
						throw new WebException(HttpErrorCodes.HTTP901_ILLEGAL_ARGUMENT_ERROR,
								"Unable to create a query param with a value containing a comma.");
					} else if (!pattern.matcher(fallbacks[j]).matches()) {
						throw new WebException(HttpErrorCodes.HTTP904_ILLEGAL_ANNOTATION_USE,
								"The field '" + annotatedElement.getName() + "' of the type '"
										+ annotatedElement.getDeclaringClass().getSimpleName() + "' is annotated with @"
										+ RequiredQueryParam.class.getSimpleName() + ", but the default value #"
										+ (j + 1) + " '" + fallbacks[j]
										+ "' does not match the specified matcher pattern '"
										+ annotationInstance.matcher() + "'.");
					}
				}
			}
		}
	}

	static class RequiredQueryParamInspector extends EventBusSubscriber
			implements Inspector<RequiredQueryParam, Field> {

		private RequiredQueryParam required;

		@Construct
		private RequiredQueryParamInspector() {
		}

		@Override
		public void inspect(Object bean, RequiredQueryParam annotationInstance, Field annotatedElement,
				TemporalInjectorCallback callback) throws Exception {
			this.required = annotationInstance;
			validate();
			annotatedElement.setAccessible(true);
			annotatedElement.set(bean, new QueryParam(this.required.value()));
		}

		@Subscribe
		private void navigationChanged(NavigationEvent event) {
			if (event.getNavigationType() == NavigationType.QUERY_PARAM_CHANGE) {
				validate();
			}
		}

		private void validate() {
			CottonUI ui = CottonUI.current();
			if (ui.hasQueryParam(this.required.value())) {
				String[] existing = ui.getQueryParam(this.required.value());
				if (this.required.valueCount() > 0 && existing.length != this.required.valueCount()) {
					throw new WebException(HttpErrorCodes.HTTP406_NOT_ACCEPTABLE,
							this.required.valueCount() + " values are required for the query paramater '"
									+ this.required.value() + "', but there " + (existing.length == 1 ? "is " : "are ")
									+ existing.length + " values set: [" + StringUtils.join(existing, ',') + "]");
				}

				for (String value : existing) {
					if (!value.matches(this.required.matcher())) {
						throw new WebException(HttpErrorCodes.HTTP406_NOT_ACCEPTABLE,
								"The value '" + value + "' does not match the pattern '" + this.required.matcher()
										+ "' required for the query paramater '" + this.required.value() + "'.");
					}
				}
			} else if (this.required.forced()) {
				if (this.required.defaultValues().length > 0) {
					ui.setQueryParam(this.required.value(), this.required.defaultValues());
				} else {
					throw new WebException(HttpErrorCodes.HTTP406_NOT_ACCEPTABLE,
							"The required query parameter '" + this.required.value() + "' is missing.");
				}
			}
		}
	}

	// #########################################################################################################################################
	// ################################################################# TYPE ##################################################################
	// #########################################################################################################################################

	private final String key;

	private QueryParam(String key) {
		this.key = key;
	}

	/**
	 * Returns whether this {@link QueryParam} is currently set in the URL.
	 * 
	 * @return True if the key of this {@link QueryParam} is contained by the
	 *         current URL, false otherwise
	 */
	public boolean exists() {
		return CottonUI.current().hasQueryParam(this.key);
	}

	/**
	 * Returns the key of this {@link QueryParam}.
	 * 
	 * @return The key of this param; never null and never empty
	 */
	public String getKey() {
		return this.key;
	}

	/**
	 * Returns the value of this {@link QueryParam} at the given index.
	 * 
	 * @param index
	 *            The index of the value to return; has to be in range
	 *            0-&gt;{@link #getValueCount()}.
	 * @return The nth value of this param; never null
	 */
	public String getValue(int index) {
		return CottonUI.current().getQueryParam(this.key)[index];
	}

	/**
	 * Returns the value count of this {@link QueryParam}.
	 * 
	 * @return The value count of this param; might be null if the parameter is not
	 *         set
	 */
	public int getValueCount() {
		return CottonUI.current().getQueryParam(this.key).length;
	}

	/**
	 * Returns the values of this {@link QueryParam}.
	 * 
	 * @return The values of this param; never null, might be empty if the parameter
	 *         is not set
	 */
	public String[] getValues() {
		return CottonUI.current().getQueryParam(this.key);
	}

	/**
	 * Sets the given values as the values of this {@link QueryParam}'s key in the
	 * URL.
	 * 
	 * @param values
	 *            The values to set; might not be null or empty without contained
	 *            nulls.
	 */
	public void setValues(String... values) {
		values = ArrayUtils.removeAllOccurences(values, (String) null);
		if (values.length == 0) {
			throw new WebException(HttpErrorCodes.HTTP901_ILLEGAL_ARGUMENT_ERROR,
					"Cannot set the query parameter to 0 values.");
		}
		CottonUI.current().setQueryParam(this.key, values);
	}

	/**
	 * Removes this {@link QueryParam} from the URL.
	 */
	public void remove() {
		CottonUI.current().removeQueryParam(this.key);
	}

	@Override
	public String toString() {
		return this.key + '=' + StringUtils.join(getValues(), ',');
	}

	static final String toParamAppender(Map<String, String[]> params) {
		List<String> queryParams = new ArrayList<>();
		if (params != null) {
			for (String key : params.keySet()) {
				queryParams.add(key + '=' + StringUtils.join(params.get(key), ','));
			}
		}
		return queryParams.isEmpty() ? StringUtils.EMPTY : "?" + StringUtils.join(queryParams, '&');
	}

	static final Map<String, String[]> fromParamAppender(String paramAppender) {
		paramAppender = StringUtils.stripStart(paramAppender, "?");

		Map<String, List<String>> preliminary = new HashMap<>();
		String[] concatenated = StringUtils.split(paramAppender, '&');
		if (concatenated != null) {
			for (String param : concatenated) {
				String[] splitted = StringUtils.split(param, '=');
				if (!preliminary.containsKey(splitted[0])) {
					preliminary.put(splitted[0], new ArrayList<>());
				}
				preliminary.get(splitted[0]).addAll(Arrays.asList(StringUtils.split(splitted[1], ',')));
			}
		}

		Map<String, String[]> params = new HashMap<>();
		for (String key : preliminary.keySet()) {
			params.put(key, preliminary.get(key).toArray(new String[preliminary.get(key).size()]));
		}
		return params;
	}

	static final Map<String, String[]> clean(Map<String, String[]> params) {
		Map<String, String[]> paramMap = new HashMap<>();
		for (Entry<String, String[]> param : params.entrySet()) {
			if (!(param.getKey().startsWith("v-") || param.getKey().startsWith("theme"))) {
				List<String> values = new ArrayList<>();
				for (String value : param.getValue()) {
					values.addAll(Arrays.asList(StringUtils.split(value, ',')));
				}
				paramMap.put(param.getKey(), values.toArray(new String[values.size()]));
			}
		}
		return paramMap;
	}
}